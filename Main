package com.techlab.app;

import com.techlab.productos.Producto;
import com.techlab.pedidos.*;
import com.techlab.excepciones.StockInsuficienteException;
import java.util.*;

public class Main {
    private static Scanner scanner = new Scanner(System.in);
    private static List<Producto> productos = new ArrayList<>();
    private static List<Pedido> pedidos = new ArrayList<>();

    public static void main(String[] args) {
        int opcion;
        do {
            mostrarMenu();
            opcion = leerEntero("Elija una opción: ");
            switch (opcion) {
                case 1 -> agregarProducto();
                case 2 -> listarProductos();
                case 3 -> buscarActualizarProducto();
                case 4 -> eliminarProducto();
                case 5 -> crearPedido();
                case 6 -> listarPedidos();
                case 7 -> System.out.println("¡Gracias por usar el sistema!");
                default -> System.out.println("Opción inválida.");
            }
        } while (opcion != 7);
    }

    private static void mostrarMenu() {
        System.out.println("""
                =================================== SISTEMA DE GESTIÓN - TECHLAB ==================================
                1) Agregar producto
                2) Listar productos
                3) Buscar/Actualizar producto
                4) Eliminar producto
                5) Crear un pedido
                6) Listar pedidos
                7) Salir
                ===============================================================================================
                """);
    }

    private static void agregarProducto() {
        System.out.print("Nombre: ");
        String nombre = scanner.nextLine();
        double precio = leerDouble("Precio: ");
        int stock = leerEntero("Stock: ");
        productos.add(new Producto(nombre, precio, stock));
        System.out.println("Producto agregado exitosamente.");
    }

    private static void listarProductos() {
        if (productos.isEmpty()) System.out.println("No hay productos cargados.");
        else productos.forEach(System.out::println);
    }

    private static void buscarActualizarProducto() {
        int id = leerEntero("Ingrese el ID del producto a buscar: ");
        Producto p = productos.stream().filter(prod -> prod.getId() == id).findFirst().orElse(null);
        if (p == null) {
            System.out.println("Producto no encontrado.");
            return;
        }
        System.out.println(p);
        System.out.println("¿Desea actualizar el precio o el stock? (p/s/n)");
        String opcion = scanner.nextLine().toLowerCase();
        if (opcion.equals("p")) {
            double nuevoPrecio = leerDouble("Nuevo precio: ");
            p.setPrecio(nuevoPrecio);
        } else if (opcion.equals("s")) {
            int nuevoStock = leerEntero("Nuevo stock: ");
            p.setStock(nuevoStock);
        }
        System.out.println("Producto actualizado.");
    }

    private static void eliminarProducto() {
        int id = leerEntero("Ingrese ID del producto a eliminar: ");
        productos.removeIf(p -> p.getId() == id);
        System.out.println("Producto eliminado (si existía).");
    }

    private static void crearPedido() {
        Pedido pedido = new Pedido();
        while (true) {
            listarProductos();
            int id = leerEntero("Ingrese ID del producto a agregar (0 para finalizar): ");
            if (id == 0) break;

            Producto p = productos.stream().filter(prod -> prod.getId() == id).findFirst().orElse(null);
            if (p == null) {
                System.out.println("Producto no encontrado.");
                continue;
            }

            int cantidad = leerEntero("Cantidad: ");
            try {
                if (cantidad > p.getStock()) {
                    throw new StockInsuficienteException("Stock insuficiente.");
                }
                p.setStock(p.getStock() - cantidad);
                pedido.agregarLinea(new LineaPedido(p, cantidad));
            } catch (StockInsuficienteException e) {
                System.out.println(e.getMessage());
            }
        }
        pedidos.add(pedido);
        System.out.println("Pedido creado exitosamente:");
        System.out.println(pedido);
    }

    private static void listarPedidos() {
        if (pedidos.isEmpty()) System.out.println("No hay pedidos registrados.");
        else pedidos.forEach(System.out::println);
    }

    private static int leerEntero(String mensaje) {
        while (true) {
            try {
                System.out.print(mensaje);
                return Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Ingrese un número válido.");
            }
        }
    }

    private static double leerDouble(String mensaje) {
        while (true) {
            try {
                System.out.print(mensaje);
                return Double.parseDouble(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Ingrese un número válido.");
            }
        }
    }
}
